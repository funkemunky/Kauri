package dev.brighten.anticheat.check.impl.packet.exploits;

import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInSetCreativeSlotPacket;
import cc.funkemunky.api.utils.RunUtils;
import cc.funkemunky.api.utils.XMaterial;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Packet;
import dev.brighten.anticheat.check.api.Setting;
import dev.brighten.api.check.CheckType;
import dev.brighten.api.check.DevStage;
import org.bukkit.GameMode;
import org.bukkit.inventory.meta.BookMeta;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumSet;
import java.util.List;

@CheckInfo(name = "CreativeCrash", description = "Patches all exploits and crashers using PacketPlayInSetCreativeSlot",
        checkType = CheckType.EXPLOIT, punishVL = 1, devStage = DevStage.RELEASE)
public class CreativeCrash extends Check {

    @Setting(name = "closeChannel")
    private static boolean closeChannel = true;

    @Setting(name = "bukkitKick.enabled")
    private static boolean bukkitKick = false;

    @Setting(name = "cancelPacket")
    private static boolean cancelPacket = true;

    @Setting(name = "impossibleItemCreate")
    private static boolean impossibleItemCreate = true;

    @Setting(name = "bukkitKick.message")
    private static String bukkitKickMessage = "Illegal packet";

    @Setting(name = "maxEnchantSize")
    private static int maxEnchantSize = 4;

    @Packet
    public boolean onEvent(WrappedInSetCreativeSlotPacket packet) {
        CRASH: {
            boolean flagged = false;
            CREATIVE:
            {
                if(packet.getPlayer().getGameMode().equals(GameMode.CREATIVE)) break CREATIVE;

                if (!packet.getPlayer().getGameMode().equals(GameMode.CREATIVE)) {
                    vl++;
                    flag("category=%s type=%s reason=%s", "CRASH", "CREATIVE",
                            "Sent PacketPlayInSetCreativeSlot without being in creative");
                    flagged = true;
                }
            }
            BOOK_PAGES:
            {
                if(packet.itemStack == null
                        || !packet.itemStack.getType().name().contains("BOOK")) break BOOK_PAGES;

                if(packet.itemStack.getItemMeta() instanceof BookMeta) {
                    BookMeta meta = (BookMeta) packet.itemStack.getItemMeta();

                    int pages = meta.getPages().size();
                    if (pages > 0) {
                        vl++;
                        flag("category=%s type=%s reason=%s", "CRASH", "BOOK_PAGES",
                                "Book was created with " + pages + " pages.");
                        flagged = true;
                    }
                }
            }
            if(flagged) {
                if (cancelPacket)
                    return true;
                if (closeChannel)
                    closePlayerChannel();
                else if (bukkitKick) RunUtils.task(() -> packet.getPlayer().kickPlayer(bukkitKickMessage));
            }
        }
        IMPOSSIBLE_ITEM: {
            if(!impossibleItemCreate || packet.itemStack == null) break IMPOSSIBLE_ITEM;

            boolean flagged = false;
            ENCHANT_SIZE:
            {
                int size = packet.itemStack.getEnchantments().size();

                if(size <= maxEnchantSize) break ENCHANT_SIZE;

                vl++;
                flag("category=%s type=%s reason=%s",
                        "EXPLOIT", "ENCHANT_SIZE",
                        "Created item" + packet.itemStack.getType().name() + " with enchantment size " + size);
                flagged = true;
            }

            if(flagged) return true;
        }
        return false;
    }
}
