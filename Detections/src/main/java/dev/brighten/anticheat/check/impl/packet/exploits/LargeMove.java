package dev.brighten.anticheat.check.impl.packet.exploits;

import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInFlyingPacket;
import cc.funkemunky.api.tinyprotocol.packet.out.WrappedOutPositionPacket;
import cc.funkemunky.api.utils.RunUtils;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Packet;
import dev.brighten.anticheat.check.api.Setting;
import dev.brighten.api.check.CheckType;
import org.bukkit.util.Vector;

import java.util.HashSet;
import java.util.Set;

@CheckInfo(name = "LargeMove", description = "Checks if the player moves extremely far.", vlToFlag = 3,
        checkType = CheckType.EXPLOIT)
public class LargeMove extends Check {

    private Vector from;

    @Setting(name = "closeChannel")
    private static boolean closeChannel = true;

    @Setting(name = "bukkitKick.enabled")
    private static boolean bukkitKick = false;

    @Setting(name = "cancelPacket")
    private static boolean cancelPacket = true;

    @Setting(name = "bukkitKick.message")
    private static String bukkitKickMessage = "Illegal move";

    private final Set<Double> teleportIds = new HashSet<>();

    @Packet
    public void onOut(WrappedOutPositionPacket packet) {
        double id = Math.random();
        synchronized (teleportIds) {
            teleportIds.add(id);
        }
        data.runKeepaliveAction(ka -> teleportIds.remove(id), 1);
    }

    @Packet
    public boolean onPacket(WrappedInFlyingPacket packet, long timeStamp) {
        boolean cancel = false;

        detection: {
            if(packet.isPos()) {
                Vector to = new Vector(packet.getX(), packet.getY(), packet.getZ());

                if(data.playerInfo.lastTeleportTimer.isPassed(4)
                        && data.playerInfo.checkMovement
                        && teleportIds.size() == 0
                        && from != null) {
                    double distance, deltaY = to.getY() - from.getY();

                    double deltaXZ = to.clone().setY(0).distance(from.clone().setY(0));
                    if(deltaY > -0.0981 && deltaY < -0.0979 && deltaXZ < 1) break detection;
                    distance = to.distance(from);
                    if(Math.abs(to.getY()) > 1000) {
                        vl++;
                        flag("type=%s y=%s", 1, to.getY());

                        if(cancelPacket) {
                            cancel = true;
                        }
                        if(closeChannel)
                            closePlayerChannel();
                        else if(bukkitKick) RunUtils.task(() -> packet.getPlayer().kickPlayer(bukkitKickMessage));
                    } else if(distance > 100) {
                        vl++;
                        flag("type=%s dist=%.2f", 2, distance);

                        if(cancelPacket) {
                            cancel = true;
                        }
                        if(closeChannel)
                            closePlayerChannel();
                        else if(bukkitKick) RunUtils.task(() -> packet.getPlayer().kickPlayer(bukkitKickMessage));
                    }
                }

                from = to;
            }
        }

        return cancel;
    }
}
