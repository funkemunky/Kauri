package dev.brighten.anticheat.check.impl.packet.exploits;

import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInBlockPlacePacket;
import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInCustomPayload;
import cc.funkemunky.api.tinyprotocol.packet.in.WrappedInTransactionPacket;
import cc.funkemunky.api.tinyprotocol.packet.types.WrappedPacketDataSerializer;
import cc.funkemunky.api.utils.RunUtils;
import cc.funkemunky.api.utils.XMaterial;
import dev.brighten.anticheat.check.api.Check;
import dev.brighten.anticheat.check.api.CheckInfo;
import dev.brighten.anticheat.check.api.Packet;
import dev.brighten.api.check.CheckType;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;

import java.awt.print.Book;

@CheckInfo(name = "BookCrash", description = "Checks for the spamming of open books.", checkType = CheckType.EXPLOIT)
public class BookCrash extends Check {

    private int sentCount, checkCount;

    @Packet
    public void blockPlace(WrappedInBlockPlacePacket packet) {
        if(packet.getItemStack() != null && packet.getItemStack().getType().name().contains("BOOK")) {
            sentCount++;
        }
    }

    @Packet
    public void inTransaction(WrappedInTransactionPacket packet) {
        if(++checkCount > 5) {
            if(sentCount > 6) {
                vl++;
                flag("book crasher");
                RunUtils.task(() -> packet.getPlayer().kickPlayer("Please, do not spam"));
            }
            checkCount = sentCount = 0;
        }
    }

    private static Material BOOK = XMaterial.BOOK.parseMaterial();
    private int pageCount = 0;
    @Packet
    public boolean onBook(WrappedInCustomPayload payload) {
        if(payload.getTag().equals("MC|BSign") || payload.getTag().equals("MC|BEdit") || payload.getTag().equals("MC|BOpen")) {
            if(!data.getPlayer().getItemInHand().getType().equals(BOOK)) {
                vl++;
                flag("Item in hand is not book");
                return true;
            } else {
                WrappedPacketDataSerializer data = new WrappedPacketDataSerializer(payload.getData());

                ItemStack book = data.getItemStack();

                BookMeta meta = (BookMeta) book.getItemMeta();

                if(meta.getPages().size() > 50) {
                    vl++;
                    flag("%s>-50", meta.getPages().size());
                    return true;
                } else {
                    for (String page : meta.getPages()) {
                        if(page.length() > 400 && ++ pageCount > 2) {
                            vl++;
                            flag("Too large of length");
                            if(vl > 2) closePlayerChannel();
                            pageCount = 0;
                            return true;
                        }
                    }
                    pageCount = 0;
                }
            }
        } else if(payload.getData().length == 0) {
            debug("Sent empty payload");
            return true;
        }
        return false;
    }
}
